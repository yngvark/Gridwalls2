/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'developer' at '7/16/16 8:38 AM' with Gradle 2.13
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
        // The following is only necessary if you want to use SNAPSHOT releases.
        // maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M2'
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'

apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.rabbitmq:amqp-client:3.6.3'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.

    // Needed for running JUnit5 tests in Intellij.
    // Not needed for running "gradle test"
    testCompile("org.junit.platform:junit-platform-runner:1.0.0-M2")

    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.0-M2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.0-M2")
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

// Create runnable jar file. See @elan's answer from
// http://stackoverflow.com/questions/14639536/how-to-export-a-executable-jar-in-gradle-and-this-jar-can-run-as-it-include-ref
//
// From the project directory, run gradle installDist
// Run java -jar build/install/<appname>/lib/<appname>.jar
apply plugin: 'application'

mainClassName = 'com.yngvark.gridwalls.microservices.zombie.Main'

jar {
    manifest {
        attributes 'Main-Class': mainClassName,
                   'Class-Path': configurations.runtime.files.collect {"$it.name"}.join(' ')
    }
}
